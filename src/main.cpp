#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_I2CDevice.h>
#include <Wire.h>


/* #region  Display */

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire, 4);
const int RIGHT = 0;
const int LEFT = 1;

int progressbarPosition = 0;

/*!
Creates a progressbar and advances it by one recktangle every time this method is called
*/
void progressBar(bool progressbarBegin)
{
  int nextProgressbarPosition = progressbarPosition + 6;

  if (nextProgressbarPosition >= 126 || progressbarBegin)
  {
    nextProgressbarPosition = 0;
    display.fillRect(0, 18, 127, 18, BLACK);
  }
  
  display.fillRect(nextProgressbarPosition, 18, 4, 18,  WHITE);
  display.display();
  delay(30);

  progressbarPosition = nextProgressbarPosition;
}

/*!
Initiates the OLED display and displays the booting screen
*/
void setupDisplay()
{
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setCursor(25, 0);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.print("Booting");
  display.display();
  
  progressBar(true);

  for (size_t i = 0; i < 20; i++)
  {
    progressBar(false);
  }
  
  delay(500);
  display.clearDisplay();
  display.stopscroll();
  display.display();
}

/*!

*/
void setCursorSettings(const int& cursorX, const int& cursorY, const int& size, const int& color = WHITE)
{
  display.setTextColor(color);
  display.setTextSize(size);
  display.setCursor(cursorX, cursorY);
}

/*!
Scrolls the content of the either left or right for x amount of millisecons
For a 128x32 OLED their are 4 sections 1-4
*/
void scrollDisplay(const int &startSection, const int &endSection, const int &duration, const int &direction)
{
  if (direction == RIGHT)
  {
    display.startscrollright(startSection, endSection);
  }
  else if (direction == LEFT)
  {
    display.startscrollleft(startSection, endSection);
  }
  delay(duration);
  display.stopscroll();
}

/*!
Prints a bitmap of ghosts and pumpkins that look to the right
*/
void printGhostRight()
{
  static const unsigned char PROGMEM right_looking_white[] =
  { 0x01, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x03, 0xe0, 
  0x06, 0x0c, 0x07, 0x80, 0x00, 0x30, 0x60, 0x3c, 0x00, 0x00, 0xc1, 0x81, 0xe0, 0x00, 0x0c, 0x18, 
  0x08, 0x02, 0x0e, 0x40, 0x00, 0x40, 0x10, 0x72, 0x00, 0x01, 0x00, 0x43, 0x90, 0x00, 0x10, 0x04, 
  0x10, 0x01, 0x0c, 0x30, 0x00, 0x80, 0x08, 0x61, 0x80, 0x02, 0x00, 0x23, 0x0c, 0x00, 0x20, 0x02, 
  0x10, 0x01, 0x01, 0xfe, 0x00, 0x80, 0x08, 0x0f, 0xf0, 0x02, 0x00, 0x20, 0x7f, 0x80, 0x20, 0x02, 
  0x20, 0xcc, 0x82, 0x01, 0x01, 0x06, 0x64, 0x10, 0x08, 0x04, 0x19, 0x90, 0x80, 0x40, 0x41, 0x99, 
  0x21, 0xce, 0x84, 0x00, 0x81, 0x0e, 0x74, 0x20, 0x04, 0x04, 0x39, 0xd1, 0x00, 0x20, 0x43, 0x9d, 
  0x21, 0xce, 0x89, 0xce, 0x41, 0x0e, 0x74, 0x4e, 0x72, 0x04, 0x39, 0xd2, 0x73, 0x90, 0x43, 0x9d, 
  0x21, 0x86, 0x89, 0xce, 0x41, 0x0c, 0x34, 0x4e, 0x72, 0x04, 0x30, 0xd2, 0x73, 0x90, 0x43, 0x0d, 
  0x20, 0x00, 0x88, 0x00, 0x41, 0x00, 0x04, 0x40, 0x02, 0x04, 0x00, 0x12, 0x00, 0x10, 0x40, 0x01, 
  0x26, 0x30, 0x8a, 0x49, 0x41, 0x31, 0x84, 0x52, 0x4a, 0x04, 0xc6, 0x12, 0x92, 0x50, 0x4c, 0x61, 
  0x21, 0x31, 0x09, 0xfe, 0x41, 0x09, 0x88, 0x4f, 0xf2, 0x04, 0x26, 0x22, 0x7f, 0x90, 0x42, 0x62, 
  0x45, 0x02, 0x04, 0x94, 0x82, 0x28, 0x10, 0x24, 0xa4, 0x08, 0xa0, 0x41, 0x25, 0x20, 0x8a, 0x04, 
  0x83, 0x0c, 0x02, 0x01, 0x04, 0x18, 0x60, 0x10, 0x08, 0x10, 0x61, 0x80, 0x80, 0x41, 0x06, 0x18, 
  0x40, 0x70, 0x01, 0xfe, 0x02, 0x03, 0x80, 0x0f, 0xf0, 0x08, 0x0e, 0x00, 0x7f, 0x80, 0x80, 0xe0, 
  0x3f, 0x80, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0x00 };

  display.drawBitmap(0, 16, right_looking_white, 128, 16, WHITE);
}

/*!
Prints a bitmap of ghosts and pumpkins that look to the left
*/
void printGhostLeft()
{
  
  static const unsigned char PROGMEM left_looking_white[] =
  { 0x07, 0xc0, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0x80, 
  0x18, 0x30, 0x07, 0x80, 0x00, 0xc1, 0x80, 0x3c, 0x00, 0x06, 0x0c, 0x01, 0xe0, 0x00, 0x30, 0x60, 
  0x20, 0x08, 0x0e, 0x40, 0x01, 0x00, 0x40, 0x72, 0x00, 0x08, 0x02, 0x03, 0x90, 0x00, 0x40, 0x10, 
  0x40, 0x04, 0x0c, 0x30, 0x02, 0x00, 0x20, 0x61, 0x80, 0x10, 0x01, 0x03, 0x0c, 0x00, 0x80, 0x08, 
  0x40, 0x04, 0x01, 0xfe, 0x02, 0x00, 0x20, 0x0f, 0xf0, 0x10, 0x01, 0x00, 0x7f, 0x80, 0x80, 0x08, 
  0x99, 0x82, 0x02, 0x01, 0x04, 0xcc, 0x10, 0x10, 0x08, 0x26, 0x60, 0x80, 0x80, 0x41, 0x33, 0x04, 
  0xb9, 0xc2, 0x04, 0x00, 0x85, 0xce, 0x10, 0x20, 0x04, 0x2e, 0x70, 0x81, 0x00, 0x21, 0x73, 0x84, 
  0xb9, 0xc2, 0x09, 0xce, 0x45, 0xce, 0x10, 0x4e, 0x72, 0x2e, 0x70, 0x82, 0x73, 0x91, 0x73, 0x84, 
  0xb0, 0xc2, 0x09, 0xce, 0x45, 0x86, 0x10, 0x4e, 0x72, 0x2c, 0x30, 0x82, 0x73, 0x91, 0x61, 0x84, 
  0x80, 0x02, 0x08, 0x00, 0x44, 0x00, 0x10, 0x40, 0x02, 0x20, 0x00, 0x82, 0x00, 0x11, 0x00, 0x04, 
  0x86, 0x32, 0x0a, 0x49, 0x44, 0x31, 0x90, 0x52, 0x4a, 0x21, 0x8c, 0x82, 0x92, 0x51, 0x0c, 0x64, 
  0x46, 0x42, 0x09, 0xfe, 0x42, 0x32, 0x10, 0x4f, 0xf2, 0x11, 0x90, 0x82, 0x7f, 0x90, 0x8c, 0x84, 
  0x20, 0x51, 0x04, 0x94, 0x81, 0x02, 0x88, 0x24, 0xa4, 0x08, 0x14, 0x41, 0x25, 0x20, 0x40, 0xa2, 
  0x18, 0x60, 0x82, 0x01, 0x00, 0xc3, 0x04, 0x10, 0x08, 0x06, 0x18, 0x20, 0x80, 0x40, 0x30, 0xc1, 
  0x07, 0x01, 0x01, 0xfe, 0x00, 0x38, 0x08, 0x0f, 0xf0, 0x01, 0xc0, 0x40, 0x7f, 0x80, 0x0e, 0x02, 
  0x00, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x01, 0xfc };

  display.drawBitmap(0, 16, left_looking_white, 128, 16, WHITE);
}

/*!
Prints the halloween message that is displayed after the boot sequence is finished
*/
void halloweenMessage()
{
  setCursorSettings(30, 0, 2);
  display.print("Spooky");

  setCursorSettings(10, 17, 2);
  display.print("Halloween");
  display.display();

  int shake_spuky = 40;

  for (size_t i = 0; i < 5; i++)
  {    
    scrollDisplay(0, 1, shake_spuky, RIGHT);
    scrollDisplay(0, 1, shake_spuky, LEFT);

    scrollDisplay(0, 1, shake_spuky, LEFT);
    scrollDisplay(0, 1, shake_spuky, RIGHT);
  }
  
  int shake_halloween = 26;

  for (size_t i = 0; i < 5; i++)
  {
    scrollDisplay(2, 3, shake_halloween, RIGHT);
    scrollDisplay(2, 3, shake_halloween, LEFT);

    scrollDisplay(2, 3, shake_halloween, LEFT);
    scrollDisplay(2, 3, shake_halloween, RIGHT);
  }

  display.clearDisplay();
  display.stopscroll();

  setCursorSettings(20, 0, 2);
  display.print("Loading");
  setCursorSettings(20, 17, 2);
  display.print("Pumkins");
  display.display();
  delay(500);
  
  display.clearDisplay();
  setCursorSettings(20, 0, 2);
  display.print("Loading");
  setCursorSettings(44, 17, 2);
  display.print("and");
  display.display();
  delay(500);
  
  display.clearDisplay();
  setCursorSettings(20, 0, 2);
  display.print("Loading");
  setCursorSettings(26, 17, 2);
  display.print("Ghosts");
  display.display();
  delay(500);
}

/*!
Creates an animation with a black background and white outlines
*/
void bmp_animation_black_on_white()
{
  setCursorSettings(0, 0, 2);
  display.print("Loading");

  setCursorSettings(0, 17, 2);
  display.print("Animation");

  display.display();
  delay(3000);
  display.clearDisplay();

  static const unsigned char PROGMEM left_looking_white[] =
{ 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x7f, 
0xe7, 0xcf, 0xf8, 0x7f, 0xff, 0x3e, 0x7f, 0xc3, 0xff, 0xf9, 0xf3, 0xfe, 0x1f, 0xff, 0xcf, 0x9f, 
0xdf, 0xf7, 0xf1, 0xbf, 0xfe, 0xff, 0xbf, 0x8d, 0xff, 0xf7, 0xfd, 0xfc, 0x6f, 0xff, 0xbf, 0xef, 
0xbf, 0xfb, 0xf3, 0xcf, 0xfd, 0xff, 0xdf, 0x9e, 0x7f, 0xef, 0xfe, 0xfc, 0xf3, 0xff, 0x7f, 0xf7, 
0xbf, 0xfb, 0xfe, 0x01, 0xfd, 0xff, 0xdf, 0xf0, 0x0f, 0xef, 0xfe, 0xff, 0x80, 0x7f, 0x7f, 0xf7, 
0x66, 0x7d, 0xfd, 0xfe, 0xfb, 0x33, 0xef, 0xef, 0xf7, 0xd9, 0x9f, 0x7f, 0x7f, 0xbe, 0xcc, 0xfb, 
0x46, 0x3d, 0xfb, 0xff, 0x7a, 0x31, 0xef, 0xdf, 0xfb, 0xd1, 0x8f, 0x7e, 0xff, 0xde, 0x8c, 0x7b, 
0x46, 0x3d, 0xf6, 0x31, 0xba, 0x31, 0xef, 0xb1, 0x8d, 0xd1, 0x8f, 0x7d, 0x8c, 0x6e, 0x8c, 0x7b, 
0x4f, 0x3d, 0xf6, 0x31, 0xba, 0x79, 0xef, 0xb1, 0x8d, 0xd3, 0xcf, 0x7d, 0x8c, 0x6e, 0x9e, 0x7b, 
0x7f, 0xfd, 0xf7, 0xff, 0xbb, 0xff, 0xef, 0xbf, 0xfd, 0xdf, 0xff, 0x7d, 0xff, 0xee, 0xff, 0xfb, 
0x79, 0xcd, 0xf5, 0xb6, 0xbb, 0xce, 0x6f, 0xad, 0xb5, 0xde, 0x73, 0x7d, 0x6d, 0xae, 0xf3, 0x9b, 
0xb9, 0xbd, 0xf6, 0x01, 0xbd, 0xcd, 0xef, 0xb0, 0x0d, 0xee, 0x6f, 0x7d, 0x80, 0x6f, 0x73, 0x7b, 
0xdf, 0xae, 0xfb, 0x6b, 0x7e, 0xfd, 0x77, 0xdb, 0x5b, 0xf7, 0xeb, 0xbe, 0xda, 0xdf, 0xbf, 0x5d, 
0xe7, 0x9f, 0x7d, 0xfe, 0xff, 0x3c, 0xfb, 0xef, 0xf7, 0xf9, 0xe7, 0xdf, 0x7f, 0xbf, 0xcf, 0x3e, 
0xf8, 0xfe, 0xfe, 0x01, 0xff, 0xc7, 0xf7, 0xf0, 0x0f, 0xfe, 0x3f, 0xbf, 0x80, 0x7f, 0xf1, 0xfd, 
0xff, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xfe, 0x03 };

static const unsigned char PROGMEM right_looking_white[] =
{ 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xfc, 0x1f, 
0xf9, 0xf3, 0xf8, 0x7f, 0xff, 0xcf, 0x9f, 0xc3, 0xff, 0xff, 0x3e, 0x7e, 0x1f, 0xff, 0xf3, 0xe7, 
0xf7, 0xfd, 0xf1, 0xbf, 0xff, 0xbf, 0xef, 0x8d, 0xff, 0xfe, 0xff, 0xbc, 0x6f, 0xff, 0xef, 0xfb, 
0xef, 0xfe, 0xf3, 0xcf, 0xff, 0x7f, 0xf7, 0x9e, 0x7f, 0xfd, 0xff, 0xdc, 0xf3, 0xff, 0xdf, 0xfd, 
0xef, 0xfe, 0xfe, 0x01, 0xff, 0x7f, 0xf7, 0xf0, 0x0f, 0xfd, 0xff, 0xdf, 0x80, 0x7f, 0xdf, 0xfd, 
0xdf, 0x33, 0x7d, 0xfe, 0xfe, 0xf9, 0x9b, 0xef, 0xf7, 0xfb, 0xe6, 0x6f, 0x7f, 0xbf, 0xbe, 0x66, 
0xde, 0x31, 0x7b, 0xff, 0x7e, 0xf1, 0x8b, 0xdf, 0xfb, 0xfb, 0xc6, 0x2e, 0xff, 0xdf, 0xbc, 0x62, 
0xde, 0x31, 0x76, 0x31, 0xbe, 0xf1, 0x8b, 0xb1, 0x8d, 0xfb, 0xc6, 0x2d, 0x8c, 0x6f, 0xbc, 0x62, 
0xde, 0x79, 0x76, 0x31, 0xbe, 0xf3, 0xcb, 0xb1, 0x8d, 0xfb, 0xcf, 0x2d, 0x8c, 0x6f, 0xbc, 0xf2, 
0xdf, 0xff, 0x77, 0xff, 0xbe, 0xff, 0xfb, 0xbf, 0xfd, 0xfb, 0xff, 0xed, 0xff, 0xef, 0xbf, 0xfe, 
0xd9, 0xcf, 0x75, 0xb6, 0xbe, 0xce, 0x7b, 0xad, 0xb5, 0xfb, 0x39, 0xed, 0x6d, 0xaf, 0xb3, 0x9e, 
0xde, 0xce, 0xf6, 0x01, 0xbe, 0xf6, 0x77, 0xb0, 0x0d, 0xfb, 0xd9, 0xdd, 0x80, 0x6f, 0xbd, 0x9d, 
0xba, 0xfd, 0xfb, 0x6b, 0x7d, 0xd7, 0xef, 0xdb, 0x5b, 0xf7, 0x5f, 0xbe, 0xda, 0xdf, 0x75, 0xfb, 
0x7c, 0xf3, 0xfd, 0xfe, 0xfb, 0xe7, 0x9f, 0xef, 0xf7, 0xef, 0x9e, 0x7f, 0x7f, 0xbe, 0xf9, 0xe7, 
0xbf, 0x8f, 0xfe, 0x01, 0xfd, 0xfc, 0x7f, 0xf0, 0x0f, 0xf7, 0xf1, 0xff, 0x80, 0x7f, 0x7f, 0x1f, 
0xc0, 0x7f, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0x80, 0xff };


  display.drawBitmap(0, 0, left_looking_white, 128, 16, WHITE);
  display.drawBitmap(0, 16, right_looking_white, 128, 16, WHITE);
  display.display();

  
  display.startscrollleft(0, 1);
  delay(5000);
  display.startscrollright(2, 3);
  delay(5000);
  display.stopscroll();
}

/*!
Creates an animation with a white background and balck outlines
*/
void bmp_animation_white_on_black()
{
  for (size_t i = 0; i < 10; i++)
  {
    display.clearDisplay();
    setCursorSettings(20, 0, 2);
    display.print("Spooking");  
    
    printGhostRight();
    display.display();
    display.startscrollright(2, 3);
    delay(2200);

    display.clearDisplay();
    setCursorSettings(20, 0, 2);
    display.print("Spooking");
    printGhostLeft();
    display.display();
    display.startscrollleft(2, 3);
    delay(2200);
  }
  
}

/* #endregion */

/* #region  LED's */
#define lamp
int BRIGHTNESS = 20;


/*!
Different Configurations since my desks & lamps use differnt length and types of LED Strips
*/
#ifdef lamp
int STRIP_SIZE = 20;
neoPixelType LED_TYPE = NEO_GRBW + NEO_KHZ800;
uint32_t PURPLE_COLOR = Adafruit_NeoPixel::gamma32(Adafruit_NeoPixel::Color(142,0,255));
uint32_t ORANGE_COLOR = Adafruit_NeoPixel::gamma32(Adafruit_NeoPixel::Color(255,168,18));
int SNAKE_SPEED = 85;
int SNAKE_LENGTH = 4;
#endif

#ifdef officedesk
int STRIP_SIZE = 47;
neoPixelType LED_TYPE = NEO_GRBW + NEO_KHZ800;
uint32_t PURPLE_COLOR = Adafruit_NeoPixel::gamma32(Adafruit_NeoPixel::Color(255,135,10));
uint32_t ORANGE_COLOR = Adafruit_NeoPixel::gamma32(Adafruit_NeoPixel::Color(132,0,190));
int SNAKE_SPEED = 30;
int SNAKE_LENGTH = 14;
#endif

#ifdef standingdesk
int STRIP_SIZE = 112;
neoPixelType LED_TYPE = NEO_GRB + NEO_KHZ800;
uint32_t PURPLE_COLOR = Adafruit_NeoPixel::gamma32(Adafruit_NeoPixel::Color(142,0,255));
uint32_t ORANGE_COLOR = Adafruit_NeoPixel::gamma32(Adafruit_NeoPixel::Color(255,168,18));
int SNAKE_SPEED = 30;
int SNAKE_LENGTH = 28;
#endif

Adafruit_NeoPixel strip = Adafruit_NeoPixel(STRIP_SIZE, 5, LED_TYPE);

/*!
Moves a line of x LED's from the beginning to the end of the LED's strip and wraps it around, to the beginning, once it hit the end
*/
void snakeAnimation()
{

  if(SNAKE_LENGTH >= strip.numPixels()) SNAKE_LENGTH = strip.numPixels() - 1;

  int      head          = SNAKE_LENGTH - 1;
  int      tail          = 0;
  int      loops         = 20000;
  int      loopNum       = 0;
  uint32_t lastTime      = millis();

  while(true) { // Repeat forever (or until a 'break' or 'return')
    
    for(int i=0; i<strip.numPixels(); i++) {  // For each pixel in strip...
      if(((i >= tail) && (i <= head)) ||      //  If between head & tail...
         ((tail > head) && ((i >= tail) || (i <= head)))) {
        strip.setPixelColor(i, ORANGE_COLOR); // Set white
      } else {                                             // else set rainbow
        strip.setPixelColor(i, PURPLE_COLOR);
      }
    }

    strip.show(); 

    if((millis() - lastTime) > SNAKE_SPEED) { // Time to update head/tail?
      if(++head >= strip.numPixels()) {      // Advance head, wrap around
        head = 0;
        if(++loopNum >= loops) return;
      }
      if(++tail >= strip.numPixels()) {      // Advance tail, wrap around
        tail = 0;
      }
      lastTime = millis();                   // Save time of last movement
    }

  }
}

/*!
Lights up an x amount of random LED's in orange every 500 milliseconds
*/
void cracklingStrip()
{
  while (true)
  {
    strip.fill(PURPLE_COLOR, 0, STRIP_SIZE);

    for (size_t i = 0; i < 20; i++)
    {
      //int randomBrightness = random(20, 255);
      int randomLED = random (0, STRIP_SIZE);
      strip.setPixelColor(randomLED, ORANGE_COLOR);
    }
    
    strip.show();
    delay(500);
  }
  
}


/* #endregion */


void ledMain()
{
  strip.begin();
  strip.clear();
  strip.setBrightness(BRIGHTNESS);
  strip.show();

  snakeAnimation();
  //cracklingStrip();
  
}

void oledMain()
{
  setupDisplay();
  halloweenMessage();
  
  delay(550);
  display.clearDisplay();
  display.stopscroll();
  

  bmp_animation_white_on_black();
    
}

void setup()
{
  Serial.begin(9600);
  //ledMain();
  oledMain();
}

void loop()
{
  
}
